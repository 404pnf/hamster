=== 0.2.1 / 2010-01-15

* Fix bug: List#empty? would cause a stack overflow on very large streams.

=== 0.2.0 / 2010-01-14

* List methods that return lists are now all lazy. Not sure what, if any, negative impact this will have but the positives have so far been well worth it.

* Ensure List#eql? (and #==) doesn't accidentally consider an empty list to be equal to an empty array!

* Ensure List responds_to? cadr and friends.

* Stream now releases the block for garbage collection once called.

* Implement List#combinations.

* Implement List#inits.

* Implement List#tails.

* Implement Hash#uniq.

* Alias #uniq as #remove_duplicates.

* Alias #all? as #forall?

* Implement Set#product.

* Implement Set#sum.

=== 0.1.23 / 2010-01-11

* Implement List#product.

* Implement List#sum.

* Implement List#last.

* Implement List#init.

* Alias #reject as #remove.

* Alias #each as #foreach.

* Rename Hash#remove as Hash#delete.

* Rename Set#remove as Set#delete.

=== 0.1.22 / 2010-01-10

* Implement List#union (aliased as #|).

* Implement List#uniq (aliased as #nub).

* Implement List#intersperse.

* Alias #include? as #elem?

* Implement Stack#to_list.

* Implement Stack#to_a.

* Implement Set#join.

* Implement Set#count.

* Implement List#count.

* Alias #include? as #contains?

* #each now returns nil if you specify a block.

* Implement Set#find (aliased as #detect).

=== 0.1.21 / 2010-01-08

* Implement List#sort. (Very, VERY inefficient implementation!)

* Implement List#sort_by. (Very, VERY inefficient implementation!)

* Implement Set#to_set.

* Implement Set#inspect.

* Implement Set#first (aliased as #head).

* Implement Set#sort. (Very, VERY inefficient implementation!)

* Implement Set#sort_by. (Very, VERY inefficient implementation!)

* Implement List#join.

=== 0.1.20 / 2010-01-07

* Implement Stack#clear.

* Implement List#clear and Stack#clear.

* Implement List#break.

* Implement List#span.

=== 0.1.19 / 2010-01-03

* Bump minimum Ruby version to 1.8.7. I mean really, c'mon!

=== 0.1.18 / 2010-01-03

* Added gem development dependency on RSpec.

=== 0.1.17 / 2010-01-02

* Alias #empty? as #null?

* Implement List#split_at.

* Implement List.iterate.

* Implement List#cycle.

* Implement List.replicate.

* Implement List.repeat.

* Simplify List#take.

* Simplify any?, all?, and none?

* Re-write List#one? to be less complex.

* Add Set#to_list.

* Implement List#zip.

* Implement Set#grep.

* Implement Set#uniq (aliased as #nub).

* Implement List#grep.

=== 0.1.16 / 2009-12-30

* Ensure streams cache results.

* Ensure lists don't blow the stack.

* List#entries is now an alias for List#to_a.

* Implement List#to_list.

* Implement List#one?.

* Set#to_a is now aliased as #entries.

* Implement List#minimum (aliased as #min) and List#maximum (aliased as #max).

=== 0.1.15 / 2009-12-15

* Implemented IO#to_list.

* Implemented Enumerable#to_list.

=== 0.1.14 / 2009-12-14

* List#reduce supports optional initial value.

* Implemented List#to_ary for implicit conversion to arrays and call parameters.

* Implemented Set#to_a.

* Alias #filter as #find_all.

* Alias #reject as #delete_if.

* Alias #reduce as #fold.

=== 0.1.13 / 2009-12-10

* Stack now fully functional

=== 0.1.12 / 2009-12-10

* List methods are now lazy where feasible

* Now works under Ruby >= 1.8.6

=== 0.1.8 / 2009-11-29

* Add convenience constructors: List[], Set[], and Hash[]

=== 0.1.7 / 2009-11-27

* Implemented #eql?/== for Hash and Set.

=== 0.1.6 / 2009-11-23

* First cut at finishing implementation of Hash.

=== 0.1.5 / 2009-11-5

* Add some examples

=== 0.1.4 / 2009-10-26

* Simplify and share Trie between Hash and Set

=== 0.1.3 / 2009-10-26

* All known issues fixed.

=== 0.1.2 / 2009-10-25

* Fixed all but one outstanding issue with #remove

=== 0.1.1 / 2009-10-23

* Added #remove

=== 0.1.0 / 2009-10-21

* Initial version
