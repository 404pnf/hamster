* Add List #count, #sort, #sort_by, #last, #nub, #each_slice, #join, #flatten, #nub (#uniq), #product, #fill, #sample, #index (#find_index), #clear, #span = [takeWhile, dropWhile], #break (#span with !predicate)
* Add Set #find (#detect), #count, #partition, #one?, #sort, #sort_by, #max(imum), #min(imum), #cycle, #product, #sample, #clear
* Add Hash #find (#detect), #count, #partition, #one?, #sort, #sort_by, #max(imum), #min(imum), #cycle, #clear
* Implement Set#union aliased as #| and #+
* Implement Set#intersection aliased as #&
* Implement Set#difference aliased as #-
* Implement Set#subtract
* Implement Set#subset?
* Implement Set#superset?
* Implement Set#^ as equivalent to ((set | enum) - (set & enum))
* Implement Hash#merge
* Work out what we can extract into common "Enumerable-like" code.
* Independently test list methods on intervals.
* Make Set and Hash lazy
* Test laziness of List methods that don't take a block.
